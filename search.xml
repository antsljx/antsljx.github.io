<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[BOM 基础知识总结]]></title>
      <url>%2F2017%2F02%2F17%2F04-jsBOM%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[1.window对象的conform方法：显示一个带有提示信息、确认和取消按钮的对话框。#####语法：conform(“提示信息”) 注意：如果将conform方法赋值给一个变量，当处理该对话框时，若点击确认，该变量为布尔数据类型true，若点击取消，该变量为布尔数据类型false。12345678910111213141516原理：var a=confirm(); //弹出对话框alert(a); //若对话框点击确认，则弹出ture；若对话框点击取消，则弹出false。例子：&lt;p id="pid"&gt;文字&lt;/p&gt; &lt;button id="btn"&gt;删除&lt;/button&gt;&lt;script&gt;var p=document.getElementById("pid"),btn=document.getElementById("btn");btn.addEventListener("click",demo)function demo()&#123;var a=confirm("确认删除吗？") if(a)&#123; p.innerHTML=""; alert("已经删除") &#125;&#125; 注意：DOM2级事件处理程序中addEventListener(“事件”,demo)，demo不可加括号。2.script标签中的代码无法操作(document)文档流上方的HTML元素对象。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JavaScript-数组]]></title>
      <url>%2F2015%2F02%2F13%2F03-js%E6%95%B0%E7%BB%84%2F</url>
      <content type="text"><![CDATA[数组arry1.随机产生一个大于0小于1的数值(0&lt;x&lt;1)方法为：1Math.random() 随机产生一个大于0小于n的数值(0&lt;x&lt;n)方法为：1Math.random()*n 随机产生一个大于0小于n+1的数值(0&lt;x&lt;n+1)方法为：1Math.random()*(n+1) 随机产生一个从0到n-1的整数(0&lt;=x&lt;=n-1)方法为：1Math.floor(Math.random()*n) Math.round(Math.random()*(n-1)) 随机产生一个从0到n的整数(0&lt;=x&lt;=n)方法为：1Math.floor(Math.random()*(n+1)) Math.round(Math.random()*n) 2.数组的属性：length属性表示数组的长度，即其中元素的个数。3. 数组的常用方法：（1）concat()连结两个或更多的数组12345concatenate连结 语法：数组1.concat(数组2,数组3,……数组n) 返回值：连结后的新数组 var arr1=[1,"2",4]; var arr2=[5,new Object,6] var arr3=arr1.concat(arr2) document.write(arr3+"&lt;br /&gt;") //页面输出返回值1,2,4,5,[object Object],6 （2）join()将数组的所有元素放入一个字符串，元素通过指定的字符串进行分隔。（即是将数组转化为一个字符串，数组元素之间可设置分隔符）。123456语法：数组.join(“分隔符”)，若不设置分隔符join()，默认分隔符为逗号。 返回值：生成的字符串 var arr=[1,"2",4,5,new Object,6] var arr1=arr.join("") document.write(arr1)//页面输出新字符串及返回值 //1245[object Object]6，无空格。 document.write(typeof arr) //页面输出Object 3）pop()删除并返回数组最后一个元素12345语法：数组.pop() 删除数组最后一个元素，并返回数组最后一个元素 返回值：最后一个元素 var arr = [1, "2", 4, 5, new Object, 6] var arr1 = arr.pop() document.write(arr1+"&lt;br/&gt;") //页面输出返回值6。 document.write(arr) //页面输出新数组1,2,4,5,[object Object]。 （4）push()向数组的末尾添加一个或更多的元素，并返回新的长度1234567语法：数组.push(元素1，元素2，……) 返回值：新的长度 例子： var arr=[1,"2",4,5,new Object,6] var arr1=arr.push("12",new Object,3) document.write(arr1+"&lt;br/&gt;") //页面输出返回值9。 document.write(arr) //页面输出新数组1,2,4,5,[object Object],6,12,[object Object],3 含义：arr添加了三个元素，而arr1为数值9。 （5）reverse()颠倒数组中元素的顺序123456789101112语法：数组.reverse() 返回值：颠倒后的数组 例子： var arr=[1,"2",4,5,new Object,6] arr.reverse(); document.write(arr) //页面输出6,[object Object],5,4,2,1 注意：数组.reverse()语法正确，而字符串.reverse()语法错误。 注解：字符串转化为数组的方法为：字符串.split(“分隔符”) 例子： var str=window.prompt("请输入数值") //prompt提示框输入字符串str。 var arr=str.split(""); //字符串str转化为数值arr。 arr.reverse(); //颠倒数组arr元素中的顺序。 var str2=arr.join("") //将数组arr转化为字符串str2，并且没有分隔符。document.write(str+"&lt;br /&gt;"); //页面输出字符串str：546285753 document.write(arr+"&lt;br /&gt;"); //页面输出颠倒顺序后的数组arr：3,5,7,5,8,2,6,4,5 document.write(str2) //页面输出字符串str2：357582645 （6）shift()删除并返回数组的第一个元素语法：数组.shift() 删除数组第一个元素。 返回值：删除的第一个元素。var arr = [&quot;a&quot;, &quot;2&quot;, 4, 5, new Object, 6] var arr1 = arr.shift() document.write(arr1+&quot; “) //页面输出返回值a。 document.write(arr) //页面输出新数组2,4,5,[object Object],6。 （7）slice()从某个指定的数组返回选定的元素，不会修改数组。123456语法：数组.slice(选择元素的起始底，选择元素的结束次序) 返回值：选择的元素。 var arr = ["a", "2", 4, 5, new Object, 6] var arr1 = arr.slice(2,5) document.write(arr1+"&lt;br/&gt;") //页面输出返回值4, 5, new Object document.write(arr) //页面输出a,4,5,[object Object],6。 注意：该方法并不会修改数组。 （8）sort()对数组的元素进行排序1234语法：数组.sort() 返回值：排序之后的数组。 var arr = [21,11,-4,9,45,6] arr.sort() document.write(arr+"&lt;br /&gt;") //页面输出-4,11,21,45,6,9 var t=function (a,b)&#123; return a-b &#125;; arr.sort(t); document.write(arr) //页面输出-4,6,9,11,21,45 （9）splice()从数组中添加/删除元素，然后返回被删除的元素。12345语法：数组.splice(删除元素的起始底，删除元素的个数，增加的元素1，增加的元素2……) 返回值：被删除的元素。 var arr = ["a", "2", 4, 5, new Object, 6] var arr1 = arr.splice(2,1,"bc",3) document.write(arr1+"&lt;br /&gt;")//页面输出4 document.write(arr) //页面输出a,2,bc,3,5,[object Object],6。 （10）tostring()将数组转化为字符串1234语法：数组.tostring() 返回值：字符串 var arr = ["a","2",new Object,6] arr.toString() document.write(arr) //页面输出a,2,[object Object],6 （11）unshift()向数组开头添加一个或更多元素，并返回新的长度12语法：数组.unshift(“元素1”,”元素2”,”元素3”) 返回值：新的长度 var arr = ["a","2",new Object,6] var arr1=arr.unshift(1,"bc") document.write(arr1+"&lt;br /&gt;")//页面输出6 document.write(arr) //页面输出1,bc,a,2,[object Object],6]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JavaScript基础语法]]></title>
      <url>%2F2015%2F02%2F09%2F02-js%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%2F</url>
      <content type="text"><![CDATA[js基本语法1.prompt(“信息提示”,”默认值”)。prompt：提示注意：prompt(“信息提示”,”默认值”)，即使输入number类型内容，提交的也是string数据类型。2.switch条件语句中的条件表达式(case 值:)默认的判断过程是全等（===）判断，即认为”3”不全等于3。（在if else条件语句中，==不识别数据类型，===识别数据类型。）例子：123var a="2" switch(a)&#123; case 2: //不满足该条件表达式alert("a"+"==="+2); //不执行，不弹出 break;default: alert("a"+"!=="+2) //弹出a！==2 &#125; 3.if else条件语句从前向后执行，当满足第一个条件表达式时，执行对应的条件语句，之后跳出if else条件语句。此时即使后面仍有满足条件的表达式，也不再执行相对应的条件语句。4.switch条件语句从前向后执行，break语句用来跳出当前switch语句。switch条件语句中不同的条件表达式(case 值:)之间为或(||)的关系。如果满足一个条件表达(case 值:)式的条件语句后没有break语句，则执行该条件语句和之后第一个break语句之前的所有条件语句。注意：由于不同的条件表达式(case 值:)之间为或(||)的关系，认为该条件表达式和之后第一个break之前所有的条件表达式返回true，执行之间所有的条件语句。5.求1！+2！+3！+……+10！123456var n=1 ;var num= 1;var sum= 0;while(n&lt;=10)&#123; num=num*n;sum=sum+num; n++; &#125;alert(sum) 注意：写循环体时最重要的是明确每一个变量所代表的含义（在Hbuild中标注每一个变量的含义）。求和循环核心三变量：循环次数n、各项数值num、各项总和sum。for循环1234567var num=初值;var sum=0;for (n=1;n&lt;=循环次数;n++) &#123; num=表达式; sum=sum+num; &#125; alert(sum)&#125; 过程：①项数赋值循环次数。②求解各项数值表达式。③初值赋值。while循环1234567var n=1 ;var num=初值;var sum= 0;while(n&lt;=循环次数)&#123; num=表达式; sum=sum+num; n++;&#125;alert(sum) 过程：①项数赋值循环次数。②求解各项数值表达式。③初值赋值。do while循环####12345678var n=1;var num= 初值;var sum=0; do&#123; num=表达式; sum=sum+num; n=n+1; &#125;while(n&lt;=循环次数) alert(sum) 过程：①项数赋值循环次数。②求解各项数值表达式。③初值赋值。6.求和 sum=2+22+222+22222+…..+2222222212345678var n = 1;var num = 0;var sum = 0;while (n &lt;= 8) &#123; num = num*10+2; sum = sum + num; n++; &#125; alert(sum)&#125; 过程：①循环次数赋值。②求解各项数值表达式。③初值赋值。7.求和 sum=1/1!+1/2!+1/3!+1/4!+1/5!+…..+1/10!12345678var n = 1;var num = 1;var sum = 0;while (n &lt;=10 ) &#123; num =1/((1/num)*n); sum = sum + num; n++;&#125;alert(sum) 8.有一只猴子吃一堆果子，已知每天吃昨天剩下的果子的一半再多一个，直到第10天才吃完。问原来这堆果子有多少个？12345678910var n = 1;var num = 0;var sum = 0;while (n &lt;= 10) &#123; num =2*num+2; sum = sum + num; n++; &#125; alert(num)&#125; 过程：①循环次数赋值。②求解各项数值表达式。③初值赋值。9.国际象棋棋盘有64格，若在第1格放1粒谷；第2格放2粒谷；第3格放4粒谷；第4格放8粒谷……如此一直放到第64格。假设2000000粒谷有一顿重，问需要多少吨谷才够放？123456789var n = 1;var num = 0.5;var sum = 0;while (n &lt;= 64) &#123; num =num*2; sum = sum + num; n++; &#125; alert(sum)&#125; 过程：①循环次数赋值。②求解各项数值表达式。③初值赋值。10.求出1-100之间所有除以3余1的数,并求和12345678910var n=1;var num=1;var sum=0;while (n&lt;=100)&#123; num=n; if(num%3==1)&#123; sum=sum+num; &#125; n++; &#125;alert(sum); 过程：①循环次数赋值。②求解各项数值表达式。③初值赋值。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[JavaScript简介]]></title>
      <url>%2F2015%2F01%2F12%2F01-js%E7%AE%80%E4%BB%8B%2F</url>
      <content type="text"><![CDATA[js基本特点1. 弱类型语言：没有明确的数据类型声明，所有变量都用var声明。2. 脚本语言：计算机可以直接执行源代码。3. JavaScript是一种基于对象(Object)和事件驱动(Event Driven)并具有安全性能的脚本语言,可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。4. JavaScript——最流行的脚本语言:弱类型语言、动态性语言、解释性语言。5. JavaScript 组成：ECMAScript（语法）、DOM（文档对象模型）、BOM（浏览器对象模型）。 BOM（Browser Object Model）js初识代码（文档输出的几种写法）1234567document.write("Hello JavaScript1&lt;br/&gt;");//文档输出时换行的第一种写法。 document.write("Hello JavaScript2"+"&lt;br /&gt;");//文档输出时换行的第二种写法。document.writeln("Hello JavaScript2"); //文档输出时文本后加一个空格。alert("Hello\nJavaScript"); //弹出对话框时换行的第一种方法。alert("Hello"+"\n"+"JavaScript"); //弹出对话框时换行的第二种方法。console.log("Hello\nJavaScript"); //控制台输出文本换行的第一种写法。 console.log("Hello"+"\n"+"JavaScript"); //控制台输出文本换行的第二种写法。 注意：①window是一个全局对象，在书写时一般省略。例如：window.document；window.alert；window.consolejs运算符简介加号（+）有两种含义：①算数运算符；②字符串拼接；当相加的各数据全部为数字数据类型时，加号的含义为算数运算符。当相加的各数据有字符串数据类型时，加号的含义在第一个字符串之前为算数运算符，在第一个字符串之后为字符串拼接（括号中的数字为加法）。例子：12var a=2+3+15+"12"+4+"abc"+(2+3)+9+1;console.log(a);//20124abc591; 注意：字符串数据类型必须用双引号包裹script标签script标签可以放在文档的任何位置，通常放在head中，建议写在body之前，使浏览器先加载标签，再运行JavaScript代码，增强用户体验。 script标签必须成对出现，同一个页面中可以出现多对，且从上往下执行。 如果一个script标签用来引入外部JavaScript文件，此标签内不能再写JavaScript代码。(标签内部写代码的时候注意script不能有src属性，值为空也不可以) script标签的type属性可以不写，也可以写text/javascript属性值，这种写法不标准，但是最通用，浏览器支持较好，也可以写application/javascript属性值，这种写法浏览器支持不是特别好。 script标签的async用来设置脚本是否支持异步，默认属性值为“false”，可定义“true”或“async”。 外链JavaScript文件的script标签添加async属性，使下一个script标签的起始执行时间无需等待当前script标签的外链JavaScript执行结束。 标识符（变量、函数、属性的名字，或者函数的参数）JavaScript的变量用来保存值或者表达式，变量的值是可以改变。变量就是计算机在内存中申请一块空间地址的别名，便于程序员识别。变量三要素：①变量名 ②变量值 ③变量类型####（1）当一个变量已声明未赋值时，变量的值为undefined。 （2）变量可以先声明后赋值，也可以声明和赋值同时进行。var a;a=10; （3）可以同时声明多个变量，变量之间用逗号隔开。var a=10,b=37,c=53; （4）所有变量都用var声明，没有严格区分数据类型，属于弱类型语言。 （5）用typeof 来确定变量的数据类型。 var a=1;alert(typeof a);//等价于alert(typeof(a)); （6）语法中可以省略var。 注意：当声明一个变量时，如果没有给他赋值，无法明确知道变量的类型，这样的语言称作弱类型语言。JavaScript是一种弱类型的语言，把所有的变量类型都用var声明，而不用明确声明数据类型，只有真正给变量赋值时，变量的类型才决定，也就是说变量的数据类型是由变量的值的类型来决定的。js数据类型ECMAScript中有5种基本数据类型：undefined、null、boolean、number 、string,还有一种复杂数据类型。 也叫引用数据类型object和函数类型function，当然，function也可以看做object类型。ECMAScript不支持 任何创建自定义类型的机制，所有值都成为以上7 种数据类型之一。在JavaScript中，用typeof()检测变量 的数据类型。对于值或变量使用typeof 操作符会返回如下字符串： 123456789101112131415undefined： 未定义 boolean ：布尔值 string： 字符串 number ：数值 object： 对象或null function ：函数 基本数据类型：数字、字符串、布尔、未定义 var a=1; alert(typeof(a)); //返回number 数字var a="1"; alert(typeof a); //返回string 字符串 var a; alert(typeof (a)) //返回undefined 未定义 var a=false; alert(typeof(a)); //返回boolean 布尔 引用数据类型：函数、数组、对象、日期、空 var a=null; alert(typeof(a)); //返回object 空 var a=function ()&#123;&#125;; alert(typeof a); //返回function（属于object的一种） var a=new Array ; alert(typeof a); //返回object 数组 var a=new Object(); alert(typeof a); //返回object 对象 关键字在JavaScript语法中有特定用途，不能用作标识符，保留字未来可能成为关键字。]]></content>
    </entry>

    
  
  
</search>
